import RPi.GPIO as GPIO
import time


class R2R_ADC:
    def __init__(self, dynamic_range, compare_time=0.0001, verbose = False):
        self.dynamic_range = dynamic_range
        self.verbose = verbose
        self.compare_time = compare_time
        
        self.gpio_bits = [26, 20, 19, 16, 13, 12, 25, 11]
        self.comp_gpio = 21

        GPIO.setmode(GPIO.BCM)
        GPIO.setup(self.gpio_bits, GPIO.OUT, initial = 0)
        GPIO.setup(self.comp_gpio, GPIO.IN)

    def deinit(self):
        GPIO.output(self.gpio_bits, 0)
        GPIO.cleanup()

    def number_to_dac(self, number):
        bin2 = [int(element) for element in bin(number)[2:].zfill(8)]
        for i in range(len(self.gpio_bits)):
            GPIO.output(self.gpio_bits[i], bin2[i])

    def sequential_counting_adc(self):
        while  (True) :
            for value in range(256):
                self.number_to_dac(value)
                time.sleep(self.compare_time)
                comp_value = GPIO.input(self.comp_gpio)
                if (comp_value ==1 or value==255):
                    return value
    def get_sv_voltage(self):
        value =self.sequential_counting_adc()
        return (value*(self.dynamic_range/255))

    def successive_approximation_adc(self):
        low_voltage = 0
        hight_voltage = self.dynamic_range
        for i in range(8):
            average_value = ((hight_voltage+low_voltage)/2)
            self.number_to_dac(average_value) 
            comp_value = GPIO.input(self.comp_gpio)
            if (comp_value==0):
                low_voltage = average_value
            else:
                hight_voltage = average_value
        return low_voltage

    def get_sar_voltage(self):
        value = self.successive_approximation_adc()
        return value*(self.dynamic_range/255)



if __name__ == "__main__":
    try:
        r2r= R2R_ADC(3.3, 0.01)
        while True:
            try:
                print("Напряжение:")
                print(r2r.get_sar_voltage())
            finally:
                f= True
    finally:
        r2r.deinit()
